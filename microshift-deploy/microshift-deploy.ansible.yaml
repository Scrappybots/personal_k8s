### Threw this together based off of documentation provided by Kasten for the configuration of Microshift and Application level backups on RHEL9.
### You will need to go to the Red Hat Hybrid Cloud Console and get an Openshift Pull Secret https://console.redhat.com/openshift/create/local
### I have a basic ansible user configured with passwordless access as a service account on my K9S server that I will use to run this playbook.
### My host configuration matches their recommendation. I have RHEL9 installed on a 40GB partition located at /dev/sda and a second 100GB partition located at /dev/sdb.
### You can run this on baremetal, or on any hypervisor platform. I use Proxmox at home, just double check the drive mappings before running the playbook and you are good to go.
### The OS I am using is a minimal install of RHEL9 from the Red Hat Developer Portal.
- name: Deploy Microshift and configure other applications and services on RHEL 9.
  hosts: personal-k8s
  remote_user: ansible
  become: yes

  vars_prompt:
    ### Gathered from https://console.redhat.com/openshift/create/local
    - name: OpenshiftAPIKey
      prompt: "Enter your OpenShift API Key"
    
    ### As of 12/15 the latest version of Microshift is 4.17, there is a pre-release of 4.18 if you are brave.
    - name: MicroshiftVersion
      prompt: "Enter the version of Microshift you would like to install"
      default: "4.17"

  tasks: 
  ### First rule of installations, update and ugpgrade!
  - name: Update DNF and Ugrade.
    dnf:
      name: '*'
      state: latest
      update_cache: yes

  ### Enable the rhocp and fast-datapath repositories. You will need to be registered with a free Red Hat Developer account.
  - name: Enable Microshift Repos. sudo subscription-manager repos --enable rhocp-4.17-for-rhel-9-$(uname -m)-rpms --enable fast-datapath-for-rhel-9-$(uname -m)-rpms
    shell: subscription-manager repos --enable rhocp-{{ MicroshiftVersion }}-for-rhel-9-$(uname -m)-rpms --enable fast-datapath-for-rhel-9-$(uname -m)-rpms

  ### Check to see if the Persistent Volume is already created (in case you are running this playbook multiple times).
  - name: Check to see if PV is already created.
    shell: pvdisplay | grep /dev/sdb
    register: pv_check

  ### If the PV is not created, create it.
  - name: Create PV on new partition.
    shell: pvcreate /dev/sdb
    when: pv_check.rc != 0

  ### Create the VG for Microshift.
  - name: Create VG for Microshift
    shell: vgcreate microshift-vg /dev/sdb
    when: pv_check.rc != 0
  
  ### Create the LV for Microshift.
  - name: Create LV for Microshift
    shell: lvcreate -L 80G -T microshift-vg/microshift-lv
    when: pv_check.rc != 0

  ### Check to see if openshift-pull-secret exists.
  - name: Check to see if openshift-pull-secret exists.
    shell: test -f /etc/crio/openshift-pull-secret
    register: openshift_pull_secret_check

  ### If openshift-pull-secret does not exist, first make sure the folder is there.
  - name: Create folder at /etc/crio/.
    shell: mkdir -p /etc/crio
    when: openshift_pull_secret_check.rc != 0

  ### Then create the openshift-pull-secret file.
  - name: Put Openshift API key in to /etc/crio/openshift-pull-secret
    shell: 'echo "{{ OpenshiftAPIKey }}" > /etc/crio/openshift-pull-secret'
    when: openshift_pull_secret_check.rc != 0

  ### Set permissions on the openshift-pull-secret file.
  - name: Set permissions on /etc/crio/openshift-pull-secret
    shell: chmod 600 /etc/crio/openshift-pull-secret
    when: openshift_pull_secret_check.rc != 0
  
  ### Now it is finally time to install Microshift.
  - name: Install Microshift
    dnf:
      name: microshift
      state: present

  # The default minimal install of RHEL 9 does not have firewalld enabled, uncomment this if you are using firewalld.
  # - name: Configure Firewalld for Microshift.
  #   shell: firewall-cmd --permanent --zone=trusted --add-source=10.42.0.0/16 && firewall-cmd --permanent --zone=trusted --add-source=169.254.169.1 && firewall-cmd --reload

  ### Start and enable Microshift.
  - name: Start and enable Microshift
    shell: systemctl enable --now microshift

  ### Check to see if lvmd.yaml exists in /etc/microshift/.
  - name: Check for lvmd.yaml in /etc/microshift/
    shell: test -f /etc/microshift/lvmd.yaml
    register: lvmd_check

  ### If lvmd.yaml does not exist, create it.
  - name: Create lvmd.yaml fild in /etc/microshift/
    shell: mkdir -p /etc/microshift && touch /etc/microshift/lvmd.yaml
    when: lvmd_check.rc != 0

  ### Create a custom lvmd.yaml file using the volume group and logical volume created earlier.
  - name: Configure the device class within LVMS to use the thin logical volume.
    lineinfile:
      path: /etc/microshift/lvmd.yaml
      line: |-
        socket-name:
        device-classes:
        - name: default
          default: true
          spare-gb: 0
          thin-pool:
            name: microshift-lv
            overprovision-ratio: 10
          type: thin
          volume-group: microshift-vg
    when: lvmd_check.rc != 0

  ### Check for kubeconfig in ~/.kube/config
  - name: Check for kubeconfig in ~/.kube/config
    shell: test -f ~/.kube/config
    register: kubeconfig_check
    ignore_errors: yes

  ### Create kubeconfig file if it does not exist.
  - name: Create ~/.kube/config
    shell: mkdir -p ~/.kube && touch ~/.kube/config
    when: kubeconfig_check.rc != 0

  ### Copy the latest kubeconfig from /var/lib/microshift/resources/kubeadmin/kubeconfig to ~/.kube/config
  - name: Copy kubeconfig from /var/lib/microshift/resources/kubeadmin/kubeconfig to ~/.kube/config
    shell: cp /var/lib/microshift/resources/kubeadmin/kubeconfig ~/.kube/config
    
  ### Currently not used, but just in case, load the kubeconfig as a variable.  
  - name: Store kubeconfig as an ansible fact
    shell: "echo /var/lib/microshift/resources/kubeadmin/kubeconfig"
    register: kubeconfig

  ### Set permissions on ~/.kube/config
  - name: Set permissions on ~/.kube/config
    shell: chmod go-r ~/.kube/config

  ### Restart Microshift to apply changes.
  - name: Restart Microshift
    shell: systemctl restart microshift

  ### Copy over the deployment files for within Microshift.
  - name: Copy over deployment yamls from ./applications/*
    copy:
      src: ./applications/
      dest: /tmp/kasten/

  ### Trigger the kasten-deploy.ansible.yaml playbook.
  - name: Run Kasten Deployment Playbook
    include_tasks: kasten-deploy.ansible.yaml